using CryptoExchange.Net.Objects;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Tatum.Net.RestObjects;

namespace Tatum.Net.Interfaces
{
    public interface ITatumOffchainBlockchainClient
    {
        WebCallResult<bool> CreateBNBAsset(string token, string basePair, CancellationToken ct = default);
        Task<WebCallResult<bool>> CreateBNBAssetAsync(string token, string basePair, CancellationToken ct = default);
        WebCallResult<OffchainAccountIdAddressPair> CreateERC20Token(string symbol, string supply, string description, string basePair, LedgerCustomerOptions customer = null, string accountingCurrency = null, int? derivationIndex = null, string xpub = null, string address = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainAccountIdAddressPair>> CreateERC20TokenAsync(string symbol, string supply, string description, string basePair, LedgerCustomerOptions customer = null, string accountingCurrency = null, int? derivationIndex = null, string xpub = null, string address = null, CancellationToken ct = default);
        WebCallResult<bool> CreateXLMAsset(string issuerAccount, string token, string basePair, CancellationToken ct = default);
        Task<WebCallResult<bool>> CreateXLMAssetAsync(string issuerAccount, string token, string basePair, CancellationToken ct = default);
        WebCallResult<bool> CreateXRPAsset(string issuerAccount, string token, string basePair, CancellationToken ct = default);
        Task<WebCallResult<bool>> CreateXRPAssetAsync(string issuerAccount, string token, string basePair, CancellationToken ct = default);
        WebCallResult<OffchainAccountIdTxIdPair> DeployERC20Token(string symbol, string supply, string description, string basePair, LedgerCustomerOptions customer = null, string xpub = null, int? derivationIndex = null, string address = null, string mnemonic = null, int? index = null, string privateKey = null, string signatureId = null, long? nonce = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainAccountIdTxIdPair>> DeployERC20TokenAsync(string symbol, string supply, string description, string basePair, LedgerCustomerOptions customer = null, string xpub = null, int? derivationIndex = null, string address = null, string mnemonic = null, int? index = null, string privateKey = null, string signatureId = null, long? nonce = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> SendBitcoin(string senderAccountId, string to_address, decimal amount, bool? compliant = null, decimal? fee = null, IEnumerable<decimal> multipleAmounts = null, IEnumerable<OffchainAddressPrivateKeyPair> keyPairs = null, string attr = null, string mnemonic = null, string signatureId = null, string xpub = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> SendBitcoinCash(string senderAccountId, string to_address, decimal amount, bool? compliant = null, decimal? fee = null, IEnumerable<decimal> multipleAmounts = null, IEnumerable<OffchainAddressPrivateKeyPair> keyPairs = null, string attr = null, string mnemonic = null, string signatureId = null, string xpub = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> SendBitcoinCashAsync(string senderAccountId, string to_address, decimal amount, bool? compliant = null, decimal? fee = null, IEnumerable<decimal> multipleAmounts = null, IEnumerable<OffchainAddressPrivateKeyPair> keyPairs = null, string attr = null, string mnemonic = null, string signatureId = null, string xpub = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> SendBitcoinAsync(string senderAccountId, string to_address, decimal amount, bool? compliant = null, decimal? fee = null, IEnumerable<decimal> multipleAmounts = null, IEnumerable<OffchainAddressPrivateKeyPair> keyPairs = null, string attr = null, string mnemonic = null, string signatureId = null, string xpub = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> SendBNB(string senderAccountId, string address, decimal amount, bool? compliant = null, string attr = null, string paymentId = null, string privateKey = null, string signatureId = null, string senderNote = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> SendBNBAsync(string senderAccountId, string address, decimal amount, bool? compliant = null, string attr = null, string paymentId = null, string privateKey = null, string signatureId = null, string senderNote = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> SendERC20Token(string senderAccountId, string to_address, decimal amount, string currency = null, long? nonce = null, bool? compliant = null, string privateKey = null, string signatureId = null, int? index = null, string mnemonic = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> SendERC20TokenAsync(string senderAccountId, string to_address, decimal amount, string currency = null, long? nonce = null, bool? compliant = null, string privateKey = null, string signatureId = null, int? index = null, string mnemonic = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> SendEthereum(string senderAccountId, string to_address, decimal amount, string currency = null, long? nonce = null, bool? compliant = null, string privateKey = null, string signatureId = null, int? index = null, string mnemonic = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> SendEthereumAsync(string senderAccountId, string to_address, decimal amount, string currency = null, long? nonce = null, bool? compliant = null, string privateKey = null, string signatureId = null, int? index = null, string mnemonic = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> SendLitecoin(string senderAccountId, string to_address, decimal amount, bool? compliant = null, decimal? fee = null, IEnumerable<decimal> multipleAmounts = null, IEnumerable<OffchainAddressPrivateKeyPair> keyPairs = null, string attr = null, string mnemonic = null, string signatureId = null, string xpub = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> SendLitecoinAsync(string senderAccountId, string to_address, decimal amount, bool? compliant = null, decimal? fee = null, IEnumerable<decimal> multipleAmounts = null, IEnumerable<OffchainAddressPrivateKeyPair> keyPairs = null, string attr = null, string mnemonic = null, string signatureId = null, string xpub = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> SendRipple(string senderAccountId, string account, string address, decimal amount, bool? compliant = null, string attr = null, int? sourceTag = null, string paymentId = null, string secret = null, string signatureId = null, string senderNote = null, string issuerAccount = null, string token = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> SendRippleAsync(string senderAccountId, string account, string address, decimal amount, bool? compliant = null, string attr = null, int? sourceTag = null, string paymentId = null, string secret = null, string signatureId = null, string senderNote = null, string issuerAccount = null, string token = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> SendStellar(string senderAccountId, string fromAccount, string address, decimal amount, string secret = null, string signatureId = null, bool? compliant = null, string attr = null, string paymentId = null, string senderNote = null, string issuerAccount = null, string token = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> SendStellarAsync(string senderAccountId, string fromAccount, string address, decimal amount, string secret = null, string signatureId = null, bool? compliant = null, string attr = null, string paymentId = null, string senderNote = null, string issuerAccount = null, string token = null, CancellationToken ct = default);
        WebCallResult<bool> SetERC20TokenContractAddress(string address, string symbol, CancellationToken ct = default);
        Task<WebCallResult<bool>> SetERC20TokenContractAddressAsync(string address, string symbol, CancellationToken ct = default);
    }
}
