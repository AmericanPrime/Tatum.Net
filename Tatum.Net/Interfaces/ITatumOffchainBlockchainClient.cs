using CryptoExchange.Net.Objects;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Tatum.Net.RestObjects;

namespace Tatum.Net.Interfaces
{
    public interface ITatumOffchainBlockchainClient
    {
        WebCallResult<bool> OffchainBlockchain_CreateBNBAsset(string token, string basePair, CancellationToken ct = default);
        Task<WebCallResult<bool>> OffchainBlockchain_CreateBNBAsset_Async(string token, string basePair, CancellationToken ct = default);
        WebCallResult<OffchainAccountIdAddressPair> OffchainBlockchain_CreateERC20Token(string symbol, string supply, string description, string basePair, LedgerCustomerOptions customer = null, string accountingCurrency = null, int? derivationIndex = null, string xpub = null, string address = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainAccountIdAddressPair>> OffchainBlockchain_CreateERC20Token_Async(string symbol, string supply, string description, string basePair, LedgerCustomerOptions customer = null, string accountingCurrency = null, int? derivationIndex = null, string xpub = null, string address = null, CancellationToken ct = default);
        WebCallResult<bool> OffchainBlockchain_CreateXLMAsset(string issuerAccount, string token, string basePair, CancellationToken ct = default);
        Task<WebCallResult<bool>> OffchainBlockchain_CreateXLMAsset_Async(string issuerAccount, string token, string basePair, CancellationToken ct = default);
        WebCallResult<bool> OffchainBlockchain_CreateXRPAsset(string issuerAccount, string token, string basePair, CancellationToken ct = default);
        Task<WebCallResult<bool>> OffchainBlockchain_CreateXRPAsset_Async(string issuerAccount, string token, string basePair, CancellationToken ct = default);
        WebCallResult<OffchainAccountIdTxIdPair> OffchainBlockchain_DeployERC20Token(string symbol, string supply, string description, string basePair, LedgerCustomerOptions customer = null, string xpub = null, int? derivationIndex = null, string address = null, string mnemonic = null, int? index = null, string privateKey = null, string signatureId = null, long? nonce = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainAccountIdTxIdPair>> OffchainBlockchain_DeployERC20Token_Async(string symbol, string supply, string description, string basePair, LedgerCustomerOptions customer = null, string xpub = null, int? derivationIndex = null, string address = null, string mnemonic = null, int? index = null, string privateKey = null, string signatureId = null, long? nonce = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> OffchainBlockchain_SendBitcoin(string senderAccountId, string to_address, decimal amount, bool? compliant = null, decimal? fee = null, IEnumerable<decimal> multipleAmounts = null, IEnumerable<OffchainAddressPrivateKeyPair> keyPairs = null, string attr = null, string mnemonic = null, string signatureId = null, string xpub = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> OffchainBlockchain_SendBitcoinCash(string senderAccountId, string to_address, decimal amount, bool? compliant = null, decimal? fee = null, IEnumerable<decimal> multipleAmounts = null, IEnumerable<OffchainAddressPrivateKeyPair> keyPairs = null, string attr = null, string mnemonic = null, string signatureId = null, string xpub = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> OffchainBlockchain_SendBitcoinCash_Async(string senderAccountId, string to_address, decimal amount, bool? compliant = null, decimal? fee = null, IEnumerable<decimal> multipleAmounts = null, IEnumerable<OffchainAddressPrivateKeyPair> keyPairs = null, string attr = null, string mnemonic = null, string signatureId = null, string xpub = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> OffchainBlockchain_SendBitcoin_Async(string senderAccountId, string to_address, decimal amount, bool? compliant = null, decimal? fee = null, IEnumerable<decimal> multipleAmounts = null, IEnumerable<OffchainAddressPrivateKeyPair> keyPairs = null, string attr = null, string mnemonic = null, string signatureId = null, string xpub = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> OffchainBlockchain_SendBNB(string senderAccountId, string address, decimal amount, bool? compliant = null, string attr = null, string paymentId = null, string privateKey = null, string signatureId = null, string senderNote = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> OffchainBlockchain_SendBNB_Async(string senderAccountId, string address, decimal amount, bool? compliant = null, string attr = null, string paymentId = null, string privateKey = null, string signatureId = null, string senderNote = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> OffchainBlockchain_SendERC20Token(string senderAccountId, string to_address, decimal amount, string currency = null, long? nonce = null, bool? compliant = null, string privateKey = null, string signatureId = null, int? index = null, string mnemonic = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> OffchainBlockchain_SendERC20Token_Async(string senderAccountId, string to_address, decimal amount, string currency = null, long? nonce = null, bool? compliant = null, string privateKey = null, string signatureId = null, int? index = null, string mnemonic = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> OffchainBlockchain_SendEthereum(string senderAccountId, string to_address, decimal amount, string currency = null, long? nonce = null, bool? compliant = null, string privateKey = null, string signatureId = null, int? index = null, string mnemonic = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> OffchainBlockchain_SendEthereum_Async(string senderAccountId, string to_address, decimal amount, string currency = null, long? nonce = null, bool? compliant = null, string privateKey = null, string signatureId = null, int? index = null, string mnemonic = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> OffchainBlockchain_SendLitecoin(string senderAccountId, string to_address, decimal amount, bool? compliant = null, decimal? fee = null, IEnumerable<decimal> multipleAmounts = null, IEnumerable<OffchainAddressPrivateKeyPair> keyPairs = null, string attr = null, string mnemonic = null, string signatureId = null, string xpub = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> OffchainBlockchain_SendLitecoin_Async(string senderAccountId, string to_address, decimal amount, bool? compliant = null, decimal? fee = null, IEnumerable<decimal> multipleAmounts = null, IEnumerable<OffchainAddressPrivateKeyPair> keyPairs = null, string attr = null, string mnemonic = null, string signatureId = null, string xpub = null, string paymentId = null, string senderNote = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> OffchainBlockchain_SendRipple(string senderAccountId, string account, string address, decimal amount, bool? compliant = null, string attr = null, int? sourceTag = null, string paymentId = null, string secret = null, string signatureId = null, string senderNote = null, string issuerAccount = null, string token = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> OffchainBlockchain_SendRipple_Async(string senderAccountId, string account, string address, decimal amount, bool? compliant = null, string attr = null, int? sourceTag = null, string paymentId = null, string secret = null, string signatureId = null, string senderNote = null, string issuerAccount = null, string token = null, CancellationToken ct = default);
        WebCallResult<OffchainTransferResponse> OffchainBlockchain_SendStellar(string senderAccountId, string fromAccount, string address, decimal amount, string secret = null, string signatureId = null, bool? compliant = null, string attr = null, string paymentId = null, string senderNote = null, string issuerAccount = null, string token = null, CancellationToken ct = default);
        Task<WebCallResult<OffchainTransferResponse>> OffchainBlockchain_SendStellar_Async(string senderAccountId, string fromAccount, string address, decimal amount, string secret = null, string signatureId = null, bool? compliant = null, string attr = null, string paymentId = null, string senderNote = null, string issuerAccount = null, string token = null, CancellationToken ct = default);
        WebCallResult<bool> OffchainBlockchain_SetERC20TokenContractAddress(string address, string symbol, CancellationToken ct = default);
        Task<WebCallResult<bool>> OffchainBlockchain_SetERC20TokenContractAddress_Async(string address, string symbol, CancellationToken ct = default);
    }
}
